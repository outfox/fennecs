// ReSharper disable file RedundantUsingDirective

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using CodegenCS;
namespace fennecs.generators;

/// <summary>
/// Generator class for CodegenCS https://github.com/Drizin/CodegenCS
/// </summary>
/// <remarks>
/// This is parsed as a CSX template in build target <b>"GenerateCode"</b>
/// </remarks>
// ReSharper disable once UnusedType.Local
file class JobsGenerator
{
    // ReSharper disable once UnusedMember.Local
    public void Main(ICodegenContext context)
    {
        context[$"Actions.g.cs"].Write(FileHeader());


        foreach (var width in Enumerable.Range(1, 5))
        {
            var top = (int) Math.Pow(3, width) - 1;
            for (var bits = top; bits >= 0; bits--)
            {
                var accessors = ToBase3(bits, width);
                GenerateAction(context[$"Actions.g.cs"], false, accessors);
                //GenerateAction(context[$"Actions.U.g.cs"], true, accessors);
            }
        }                           
    }

    private string FileHeader()
    {
        return 
            $"""
            // <auto-generated/>
            using System.Runtime.CompilerServices;
            using fennecs.pools;
            using fennecs.storage;
            
            namespace fennecs;
            
            #pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
            // ReSharper disable file IdentifierTypo
            
            """;
}

    private readonly Dictionary<char, string> _keyword = new()
    {
        ['O'] = "out",
        ['R'] = "ref",
        ['I'] = "in",
    };
    
    private string ToBase3(int value, int width)
    {
        var builder = new StringBuilder();
        while (value > 0 || builder.Length < width)
        {
            var digit = (value % 3) switch
                        {
                            0 => "O",
                            1 => "R",
                            2 => "I",
                            _ => throw new NotImplementedException(),
                        };
            builder.Append(digit);
            value /= 3;
        }
            
        return builder.ToString();
    }
    
    private void GenerateAction(ICodegenTextWriter text, bool uniform, string accessors)
    {
        text.Write($"public delegate void Action{accessors}<");
        
        if (uniform) text.Write("in U, ");
        
        for (var i = 0; i < accessors.Length; i++)
        {
            text.Write($"C{i}");
            if (i < accessors.Length - 1) text.Write(", ");
        }
        
        text.Write(">(");
        
        if (uniform) text.Write("U uniform, ");
        
        for (var i = 0; i < accessors.Length; i++)
        {
            text.Write($"{_keyword[accessors[i]]} C{i} comp{i}");
            if (i < accessors.Length - 1) text.Write(", ");
        }
        
        text.Write(") ");
        for (var i = 0; i < accessors.Length; i++)
        {
            text.Write($"where C{i} : notnull ");
        }
        text.WriteLine(";");
    }
}