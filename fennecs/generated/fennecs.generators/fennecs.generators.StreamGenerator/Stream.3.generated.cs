// <auto-generated/>
using System.Runtime.CompilerServices;

using fennecs.pools;
using fennecs.storage;

namespace fennecs;

public partial record Stream<C0, C1, C2>
{

        /// <include file='XMLdoc.xml' path='members/member[@name="T:For"]'/>
        [OverloadResolutionPriority(0b_0_00000111)]
        public void For(Action<R<C0>, R<C1>, R<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(ref span0[i]), new(ref span1[i]), new(ref span2[i])); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForE"]'/>
        [OverloadResolutionPriority(0b_1_00000111)]
        public void For(Action<EntityRef, R<C0>, R<C1>, R<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(in entity), new(ref span0[i]), new(ref span1[i]), new(ref span2[i])); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForU"]'/>
        [OverloadResolutionPriority(0b_0_00000111)]
        public void For<U>(U uniform, Action<U, R<C0>, R<C1>, R<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(uniform, new(ref span0[i]), new(ref span1[i]), new(ref span2[i])); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForEU"]'/>
        [OverloadResolutionPriority(0b_1_00000111)]
        public void For<U>(U uniform, Action<EntityRef, U, R<C0>, R<C1>, R<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(in entity), uniform, new(ref span0[i]), new(ref span1[i]), new(ref span2[i])); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:For"]'/>
        [OverloadResolutionPriority(0b_0_00000110)]
        public void For(Action<R<C0>, R<C1>, RW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(ref span0[i]), new(ref span1[i]), new(ref span2[i], in entity, in type2)); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForE"]'/>
        [OverloadResolutionPriority(0b_1_00000110)]
        public void For(Action<EntityRef, R<C0>, R<C1>, RW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(in entity), new(ref span0[i]), new(ref span1[i]), new(ref span2[i], in entity, in type2)); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForU"]'/>
        [OverloadResolutionPriority(0b_0_00000110)]
        public void For<U>(U uniform, Action<U, R<C0>, R<C1>, RW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(uniform, new(ref span0[i]), new(ref span1[i]), new(ref span2[i], in entity, in type2)); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForEU"]'/>
        [OverloadResolutionPriority(0b_1_00000110)]
        public void For<U>(U uniform, Action<EntityRef, U, R<C0>, R<C1>, RW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(in entity), uniform, new(ref span0[i]), new(ref span1[i]), new(ref span2[i], in entity, in type2)); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:For"]'/>
        [OverloadResolutionPriority(0b_0_00000101)]
        public void For(Action<R<C0>, RW<C1>, R<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(ref span0[i]), new(ref span1[i], in entity, in type1), new(ref span2[i])); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForE"]'/>
        [OverloadResolutionPriority(0b_1_00000101)]
        public void For(Action<EntityRef, R<C0>, RW<C1>, R<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(in entity), new(ref span0[i]), new(ref span1[i], in entity, in type1), new(ref span2[i])); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForU"]'/>
        [OverloadResolutionPriority(0b_0_00000101)]
        public void For<U>(U uniform, Action<U, R<C0>, RW<C1>, R<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(uniform, new(ref span0[i]), new(ref span1[i], in entity, in type1), new(ref span2[i])); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForEU"]'/>
        [OverloadResolutionPriority(0b_1_00000101)]
        public void For<U>(U uniform, Action<EntityRef, U, R<C0>, RW<C1>, R<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(in entity), uniform, new(ref span0[i]), new(ref span1[i], in entity, in type1), new(ref span2[i])); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:For"]'/>
        [OverloadResolutionPriority(0b_0_00000100)]
        public void For(Action<R<C0>, RW<C1>, RW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(ref span0[i]), new(ref span1[i], in entity, in type1), new(ref span2[i], in entity, in type2)); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForE"]'/>
        [OverloadResolutionPriority(0b_1_00000100)]
        public void For(Action<EntityRef, R<C0>, RW<C1>, RW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(in entity), new(ref span0[i]), new(ref span1[i], in entity, in type1), new(ref span2[i], in entity, in type2)); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForU"]'/>
        [OverloadResolutionPriority(0b_0_00000100)]
        public void For<U>(U uniform, Action<U, R<C0>, RW<C1>, RW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(uniform, new(ref span0[i]), new(ref span1[i], in entity, in type1), new(ref span2[i], in entity, in type2)); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForEU"]'/>
        [OverloadResolutionPriority(0b_1_00000100)]
        public void For<U>(U uniform, Action<EntityRef, U, R<C0>, RW<C1>, RW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(in entity), uniform, new(ref span0[i]), new(ref span1[i], in entity, in type1), new(ref span2[i], in entity, in type2)); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:For"]'/>
        [OverloadResolutionPriority(0b_0_00000011)]
        public void For(Action<RW<C0>, R<C1>, R<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(ref span0[i], in entity, in type0), new(ref span1[i]), new(ref span2[i])); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForE"]'/>
        [OverloadResolutionPriority(0b_1_00000011)]
        public void For(Action<EntityRef, RW<C0>, R<C1>, R<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(in entity), new(ref span0[i], in entity, in type0), new(ref span1[i]), new(ref span2[i])); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForU"]'/>
        [OverloadResolutionPriority(0b_0_00000011)]
        public void For<U>(U uniform, Action<U, RW<C0>, R<C1>, R<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(uniform, new(ref span0[i], in entity, in type0), new(ref span1[i]), new(ref span2[i])); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForEU"]'/>
        [OverloadResolutionPriority(0b_1_00000011)]
        public void For<U>(U uniform, Action<EntityRef, U, RW<C0>, R<C1>, R<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(in entity), uniform, new(ref span0[i], in entity, in type0), new(ref span1[i]), new(ref span2[i])); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:For"]'/>
        [OverloadResolutionPriority(0b_0_00000010)]
        public void For(Action<RW<C0>, R<C1>, RW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(ref span0[i], in entity, in type0), new(ref span1[i]), new(ref span2[i], in entity, in type2)); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForE"]'/>
        [OverloadResolutionPriority(0b_1_00000010)]
        public void For(Action<EntityRef, RW<C0>, R<C1>, RW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(in entity), new(ref span0[i], in entity, in type0), new(ref span1[i]), new(ref span2[i], in entity, in type2)); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForU"]'/>
        [OverloadResolutionPriority(0b_0_00000010)]
        public void For<U>(U uniform, Action<U, RW<C0>, R<C1>, RW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(uniform, new(ref span0[i], in entity, in type0), new(ref span1[i]), new(ref span2[i], in entity, in type2)); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForEU"]'/>
        [OverloadResolutionPriority(0b_1_00000010)]
        public void For<U>(U uniform, Action<EntityRef, U, RW<C0>, R<C1>, RW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(in entity), uniform, new(ref span0[i], in entity, in type0), new(ref span1[i]), new(ref span2[i], in entity, in type2)); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:For"]'/>
        [OverloadResolutionPriority(0b_0_00000001)]
        public void For(Action<RW<C0>, RW<C1>, R<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(ref span0[i], in entity, in type0), new(ref span1[i], in entity, in type1), new(ref span2[i])); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForE"]'/>
        [OverloadResolutionPriority(0b_1_00000001)]
        public void For(Action<EntityRef, RW<C0>, RW<C1>, R<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(in entity), new(ref span0[i], in entity, in type0), new(ref span1[i], in entity, in type1), new(ref span2[i])); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForU"]'/>
        [OverloadResolutionPriority(0b_0_00000001)]
        public void For<U>(U uniform, Action<U, RW<C0>, RW<C1>, R<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(uniform, new(ref span0[i], in entity, in type0), new(ref span1[i], in entity, in type1), new(ref span2[i])); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForEU"]'/>
        [OverloadResolutionPriority(0b_1_00000001)]
        public void For<U>(U uniform, Action<EntityRef, U, RW<C0>, RW<C1>, R<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(in entity), uniform, new(ref span0[i], in entity, in type0), new(ref span1[i], in entity, in type1), new(ref span2[i])); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:For"]'/>
        [OverloadResolutionPriority(0b_0_00000000)]
        public void For(Action<RW<C0>, RW<C1>, RW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(ref span0[i], in entity, in type0), new(ref span1[i], in entity, in type1), new(ref span2[i], in entity, in type2)); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForE"]'/>
        [OverloadResolutionPriority(0b_1_00000000)]
        public void For(Action<EntityRef, RW<C0>, RW<C1>, RW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(in entity), new(ref span0[i], in entity, in type0), new(ref span1[i], in entity, in type1), new(ref span2[i], in entity, in type2)); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForU"]'/>
        [OverloadResolutionPriority(0b_0_00000000)]
        public void For<U>(U uniform, Action<U, RW<C0>, RW<C1>, RW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(uniform, new(ref span0[i], in entity, in type0), new(ref span1[i], in entity, in type1), new(ref span2[i], in entity, in type2)); 
                   }
               } while (join.Iterate());
           }
        }
        
        

        /// <include file='XMLdoc.xml' path='members/member[@name="T:ForEU"]'/>
        [OverloadResolutionPriority(0b_1_00000000)]
        public void For<U>(U uniform, Action<EntityRef, U, RW<C0>, RW<C1>, RW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               var count = table.Count;
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;
               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; 
                   for (var i = 0; i < count; i++)
                   {   
                       var entity = table[i];
                       action(new(in entity), uniform, new(ref span0[i], in entity, in type0), new(ref span1[i], in entity, in type1), new(ref span2[i], in entity, in type2)); 
                   }
               } while (join.Iterate());
           }
        }
        
        
}
