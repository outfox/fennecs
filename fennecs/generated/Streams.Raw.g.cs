// <auto-generated/>
using System.Runtime.CompilerServices;
using fennecs.pools;
using fennecs.storage;

namespace fennecs;
public partial record Stream<C0>
{

        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000001)]
        public void Raw(Action<MemoryR<C0>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var s0 = join.Select;
                   var span0 = s0.Span;
                   action(s0.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000001)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var s0 = join.Select;
                   var span0 = s0.Span;
                   action(uniform, s0.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000000)]
        public void Raw(Action<MemoryRW<C0>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var s0 = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression;
                   action(s0.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000000)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var s0 = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression;
                   action(uniform, s0.AsMemory());
               } while (join.Iterate());
           }
        }


}


public partial record Stream<C0, C1>
{

        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000011)]
        public void Raw(Action<MemoryR<C0>, MemoryR<C1>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span;
                   action(s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000011)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryR<C1>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000010)]
        public void Raw(Action<MemoryR<C0>, MemoryRW<C1>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression;
                   action(s0.AsReadOnlyMemory(), s1.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000010)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryRW<C1>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000001)]
        public void Raw(Action<MemoryRW<C0>, MemoryR<C1>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span;
                   action(s0.AsMemory(), s1.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000001)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryR<C1>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span;
                   action(uniform, s0.AsMemory(), s1.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000000)]
        public void Raw(Action<MemoryRW<C0>, MemoryRW<C1>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression;
                   action(s0.AsMemory(), s1.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000000)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryRW<C1>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression;
                   action(uniform, s0.AsMemory(), s1.AsMemory());
               } while (join.Iterate());
           }
        }


}


public partial record Stream<C0, C1, C2>
{

        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000111)]
        public void Raw(Action<MemoryR<C0>, MemoryR<C1>, MemoryR<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span;
                   action(s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000111)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryR<C1>, MemoryR<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000110)]
        public void Raw(Action<MemoryR<C0>, MemoryR<C1>, MemoryRW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression;
                   action(s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000110)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryR<C1>, MemoryRW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000101)]
        public void Raw(Action<MemoryR<C0>, MemoryRW<C1>, MemoryR<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span;
                   action(s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000101)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryRW<C1>, MemoryR<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000100)]
        public void Raw(Action<MemoryR<C0>, MemoryRW<C1>, MemoryRW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression;
                   action(s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000100)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryRW<C1>, MemoryRW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000011)]
        public void Raw(Action<MemoryRW<C0>, MemoryR<C1>, MemoryR<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span;
                   action(s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000011)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryR<C1>, MemoryR<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span;
                   action(uniform, s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000010)]
        public void Raw(Action<MemoryRW<C0>, MemoryR<C1>, MemoryRW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression;
                   action(s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000010)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryR<C1>, MemoryRW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression;
                   action(uniform, s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000001)]
        public void Raw(Action<MemoryRW<C0>, MemoryRW<C1>, MemoryR<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span;
                   action(s0.AsMemory(), s1.AsMemory(), s2.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000001)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryRW<C1>, MemoryR<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span;
                   action(uniform, s0.AsMemory(), s1.AsMemory(), s2.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000000)]
        public void Raw(Action<MemoryRW<C0>, MemoryRW<C1>, MemoryRW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression;
                   action(s0.AsMemory(), s1.AsMemory(), s2.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000000)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryRW<C1>, MemoryRW<C2>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression;
                   action(uniform, s0.AsMemory(), s1.AsMemory(), s2.AsMemory());
               } while (join.Iterate());
           }
        }


}


public partial record Stream<C0, C1, C2, C3>
{

        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00001111)]
        public void Raw(Action<MemoryR<C0>, MemoryR<C1>, MemoryR<C2>, MemoryR<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span;
                   action(s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00001111)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryR<C1>, MemoryR<C2>, MemoryR<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00001110)]
        public void Raw(Action<MemoryR<C0>, MemoryR<C1>, MemoryR<C2>, MemoryRW<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression;
                   action(s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00001110)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryR<C1>, MemoryR<C2>, MemoryRW<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00001101)]
        public void Raw(Action<MemoryR<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryR<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span;
                   action(s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00001101)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryR<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00001100)]
        public void Raw(Action<MemoryR<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryRW<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression;
                   action(s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00001100)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryRW<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00001011)]
        public void Raw(Action<MemoryR<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryR<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span;
                   action(s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00001011)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryR<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00001010)]
        public void Raw(Action<MemoryR<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryRW<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression;
                   action(s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00001010)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryRW<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00001001)]
        public void Raw(Action<MemoryR<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryR<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span;
                   action(s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00001001)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryR<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00001000)]
        public void Raw(Action<MemoryR<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryRW<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression;
                   action(s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00001000)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryRW<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000111)]
        public void Raw(Action<MemoryRW<C0>, MemoryR<C1>, MemoryR<C2>, MemoryR<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span;
                   action(s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000111)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryR<C1>, MemoryR<C2>, MemoryR<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span;
                   action(uniform, s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000110)]
        public void Raw(Action<MemoryRW<C0>, MemoryR<C1>, MemoryR<C2>, MemoryRW<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression;
                   action(s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000110)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryR<C1>, MemoryR<C2>, MemoryRW<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression;
                   action(uniform, s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000101)]
        public void Raw(Action<MemoryRW<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryR<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span;
                   action(s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000101)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryR<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span;
                   action(uniform, s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000100)]
        public void Raw(Action<MemoryRW<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryRW<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression;
                   action(s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000100)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryRW<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression;
                   action(uniform, s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000011)]
        public void Raw(Action<MemoryRW<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryR<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span;
                   action(s0.AsMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000011)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryR<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span;
                   action(uniform, s0.AsMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000010)]
        public void Raw(Action<MemoryRW<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryRW<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression;
                   action(s0.AsMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000010)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryRW<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression;
                   action(uniform, s0.AsMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000001)]
        public void Raw(Action<MemoryRW<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryR<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span;
                   action(s0.AsMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000001)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryR<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span;
                   action(uniform, s0.AsMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000000)]
        public void Raw(Action<MemoryRW<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryRW<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression;
                   action(s0.AsMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000000)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryRW<C3>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression;
                   action(uniform, s0.AsMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsMemory());
               } while (join.Iterate());
           }
        }


}


public partial record Stream<C0, C1, C2, C3, C4>
{

        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00011111)]
        public void Raw(Action<MemoryR<C0>, MemoryR<C1>, MemoryR<C2>, MemoryR<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var span4 = s4.Span;
                   action(s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00011111)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryR<C1>, MemoryR<C2>, MemoryR<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var span4 = s4.Span;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00011110)]
        public void Raw(Action<MemoryR<C0>, MemoryR<C1>, MemoryR<C2>, MemoryR<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var span4 = s4.Span; var type4 = s4.Expression;
                   action(s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00011110)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryR<C1>, MemoryR<C2>, MemoryR<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var span4 = s4.Span; var type4 = s4.Expression;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00011101)]
        public void Raw(Action<MemoryR<C0>, MemoryR<C1>, MemoryR<C2>, MemoryRW<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span;
                   action(s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00011101)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryR<C1>, MemoryR<C2>, MemoryRW<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00011100)]
        public void Raw(Action<MemoryR<C0>, MemoryR<C1>, MemoryR<C2>, MemoryRW<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span; var type4 = s4.Expression;
                   action(s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00011100)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryR<C1>, MemoryR<C2>, MemoryRW<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span; var type4 = s4.Expression;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00011011)]
        public void Raw(Action<MemoryR<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryR<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var span4 = s4.Span;
                   action(s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsReadOnlyMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00011011)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryR<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var span4 = s4.Span;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsReadOnlyMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00011010)]
        public void Raw(Action<MemoryR<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryR<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var span4 = s4.Span; var type4 = s4.Expression;
                   action(s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsReadOnlyMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00011010)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryR<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var span4 = s4.Span; var type4 = s4.Expression;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsReadOnlyMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00011001)]
        public void Raw(Action<MemoryR<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryRW<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span;
                   action(s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00011001)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryRW<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00011000)]
        public void Raw(Action<MemoryR<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryRW<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span; var type4 = s4.Expression;
                   action(s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00011000)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryRW<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span; var type4 = s4.Expression;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00010111)]
        public void Raw(Action<MemoryR<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryR<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var span4 = s4.Span;
                   action(s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00010111)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryR<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var span4 = s4.Span;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00010110)]
        public void Raw(Action<MemoryR<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryR<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var span4 = s4.Span; var type4 = s4.Expression;
                   action(s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00010110)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryR<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var span4 = s4.Span; var type4 = s4.Expression;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00010101)]
        public void Raw(Action<MemoryR<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryRW<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span;
                   action(s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00010101)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryRW<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00010100)]
        public void Raw(Action<MemoryR<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryRW<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span; var type4 = s4.Expression;
                   action(s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00010100)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryRW<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span; var type4 = s4.Expression;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00010011)]
        public void Raw(Action<MemoryR<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryR<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var span4 = s4.Span;
                   action(s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsReadOnlyMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00010011)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryR<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var span4 = s4.Span;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsReadOnlyMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00010010)]
        public void Raw(Action<MemoryR<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryR<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var span4 = s4.Span; var type4 = s4.Expression;
                   action(s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsReadOnlyMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00010010)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryR<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var span4 = s4.Span; var type4 = s4.Expression;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsReadOnlyMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00010001)]
        public void Raw(Action<MemoryR<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryRW<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span;
                   action(s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00010001)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryRW<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00010000)]
        public void Raw(Action<MemoryR<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryRW<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span; var type4 = s4.Expression;
                   action(s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00010000)]
        public void Raw<U>(U uniform, Action<U, MemoryR<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryRW<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span; var type4 = s4.Expression;
                   action(uniform, s0.AsReadOnlyMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00001111)]
        public void Raw(Action<MemoryRW<C0>, MemoryR<C1>, MemoryR<C2>, MemoryR<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var span4 = s4.Span;
                   action(s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00001111)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryR<C1>, MemoryR<C2>, MemoryR<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var span4 = s4.Span;
                   action(uniform, s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00001110)]
        public void Raw(Action<MemoryRW<C0>, MemoryR<C1>, MemoryR<C2>, MemoryR<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var span4 = s4.Span; var type4 = s4.Expression;
                   action(s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00001110)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryR<C1>, MemoryR<C2>, MemoryR<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var span4 = s4.Span; var type4 = s4.Expression;
                   action(uniform, s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00001101)]
        public void Raw(Action<MemoryRW<C0>, MemoryR<C1>, MemoryR<C2>, MemoryRW<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span;
                   action(s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00001101)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryR<C1>, MemoryR<C2>, MemoryRW<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span;
                   action(uniform, s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00001100)]
        public void Raw(Action<MemoryRW<C0>, MemoryR<C1>, MemoryR<C2>, MemoryRW<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span; var type4 = s4.Expression;
                   action(s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00001100)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryR<C1>, MemoryR<C2>, MemoryRW<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span; var type4 = s4.Expression;
                   action(uniform, s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsReadOnlyMemory(), s3.AsMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00001011)]
        public void Raw(Action<MemoryRW<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryR<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var span4 = s4.Span;
                   action(s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsReadOnlyMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00001011)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryR<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var span4 = s4.Span;
                   action(uniform, s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsReadOnlyMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00001010)]
        public void Raw(Action<MemoryRW<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryR<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var span4 = s4.Span; var type4 = s4.Expression;
                   action(s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsReadOnlyMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00001010)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryR<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var span4 = s4.Span; var type4 = s4.Expression;
                   action(uniform, s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsReadOnlyMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00001001)]
        public void Raw(Action<MemoryRW<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryRW<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span;
                   action(s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00001001)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryRW<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span;
                   action(uniform, s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00001000)]
        public void Raw(Action<MemoryRW<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryRW<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span; var type4 = s4.Expression;
                   action(s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00001000)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryR<C1>, MemoryRW<C2>, MemoryRW<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span; var type4 = s4.Expression;
                   action(uniform, s0.AsMemory(), s1.AsReadOnlyMemory(), s2.AsMemory(), s3.AsMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000111)]
        public void Raw(Action<MemoryRW<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryR<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var span4 = s4.Span;
                   action(s0.AsMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000111)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryR<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var span4 = s4.Span;
                   action(uniform, s0.AsMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000110)]
        public void Raw(Action<MemoryRW<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryR<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var span4 = s4.Span; var type4 = s4.Expression;
                   action(s0.AsMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000110)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryR<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var span4 = s4.Span; var type4 = s4.Expression;
                   action(uniform, s0.AsMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsReadOnlyMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000101)]
        public void Raw(Action<MemoryRW<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryRW<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span;
                   action(s0.AsMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000101)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryRW<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span;
                   action(uniform, s0.AsMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000100)]
        public void Raw(Action<MemoryRW<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryRW<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span; var type4 = s4.Expression;
                   action(s0.AsMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000100)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryRW<C1>, MemoryR<C2>, MemoryRW<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span; var type4 = s4.Expression;
                   action(uniform, s0.AsMemory(), s1.AsMemory(), s2.AsReadOnlyMemory(), s3.AsMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000011)]
        public void Raw(Action<MemoryRW<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryR<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var span4 = s4.Span;
                   action(s0.AsMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsReadOnlyMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000011)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryR<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var span4 = s4.Span;
                   action(uniform, s0.AsMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsReadOnlyMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000010)]
        public void Raw(Action<MemoryRW<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryR<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var span4 = s4.Span; var type4 = s4.Expression;
                   action(s0.AsMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsReadOnlyMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000010)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryR<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var span4 = s4.Span; var type4 = s4.Expression;
                   action(uniform, s0.AsMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsReadOnlyMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000001)]
        public void Raw(Action<MemoryRW<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryRW<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span;
                   action(s0.AsMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000001)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryRW<C3>, MemoryR<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span;
                   action(uniform, s0.AsMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsMemory(), s4.AsReadOnlyMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:Raw"]'/>
        [OverloadResolutionPriority(0b_00000000_00000000)]
        public void Raw(Action<MemoryRW<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryRW<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span; var type4 = s4.Expression;
                   action(s0.AsMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }



        /// <include file='../_docs.xml' path='members/member[@name="T:RawU"]'/>
        [OverloadResolutionPriority(0b_00000000_00000000)]
        public void Raw<U>(U uniform, Action<U, MemoryRW<C0>, MemoryRW<C1>, MemoryRW<C2>, MemoryRW<C3>, MemoryRW<C4>> action)
        {
           using var worldLock = World.Lock();

           foreach (var table in Filtered)
           {
               using var join = table.CrossJoin<C0, C1, C2, C3, C4>(_streamTypes.AsSpan());
               if (join.Empty) continue;

               do
               {
                   var (s0, s1, s2, s3, s4) = join.Select;
                   var span0 = s0.Span; var type0 = s0.Expression; var span1 = s1.Span; var type1 = s1.Expression; var span2 = s2.Span; var type2 = s2.Expression; var span3 = s3.Span; var type3 = s3.Expression; var span4 = s4.Span; var type4 = s4.Expression;
                   action(uniform, s0.AsMemory(), s1.AsMemory(), s2.AsMemory(), s3.AsMemory(), s4.AsMemory());
               } while (join.Iterate());
           }
        }


}


