// <auto-generated/>
using System.Runtime.CompilerServices;
using fennecs.pools;
using fennecs.storage;

namespace fennecs;

#pragma warning disable CS0414 // Field is assigned but its value is never used
// ReSharper disable file IdentifierTypo

    internal record JobRRRR<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<R<C0>, R<C1>, R<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in span0[i]), new(in span1[i]), new(in span2[i]), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobERRRR<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<EntityRef, R<C0>, R<C1>, R<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), new(in span0[i]), new(in span1[i]), new(in span2[i]), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobURRRR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<U, R<C0>, R<C1>, R<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(Uniform, new(in span0[i]), new(in span1[i]), new(in span2[i]), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobEURRRR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<EntityRef, U, R<C0>, R<C1>, R<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), Uniform, new(in span0[i]), new(in span1[i]), new(in span2[i]), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobRRRW<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<R<C0>, R<C1>, R<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in span0[i]), new(in span1[i]), new(in span2[i]), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobERRRW<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<EntityRef, R<C0>, R<C1>, R<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), new(in span0[i]), new(in span1[i]), new(in span2[i]), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobURRRW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<U, R<C0>, R<C1>, R<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(Uniform, new(in span0[i]), new(in span1[i]), new(in span2[i]), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobEURRRW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<EntityRef, U, R<C0>, R<C1>, R<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), Uniform, new(in span0[i]), new(in span1[i]), new(in span2[i]), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobRRWR<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<R<C0>, R<C1>, RW<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in span0[i]), new(in span1[i]), new(ref span2[i], in entity, in Type2), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobERRWR<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<EntityRef, R<C0>, R<C1>, RW<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), new(in span0[i]), new(in span1[i]), new(ref span2[i], in entity, in Type2), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobURRWR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<U, R<C0>, R<C1>, RW<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(Uniform, new(in span0[i]), new(in span1[i]), new(ref span2[i], in entity, in Type2), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobEURRWR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<EntityRef, U, R<C0>, R<C1>, RW<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), Uniform, new(in span0[i]), new(in span1[i]), new(ref span2[i], in entity, in Type2), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobRRWW<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<R<C0>, R<C1>, RW<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in span0[i]), new(in span1[i]), new(ref span2[i], in entity, in Type2), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobERRWW<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<EntityRef, R<C0>, R<C1>, RW<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), new(in span0[i]), new(in span1[i]), new(ref span2[i], in entity, in Type2), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobURRWW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<U, R<C0>, R<C1>, RW<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(Uniform, new(in span0[i]), new(in span1[i]), new(ref span2[i], in entity, in Type2), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobEURRWW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<EntityRef, U, R<C0>, R<C1>, RW<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), Uniform, new(in span0[i]), new(in span1[i]), new(ref span2[i], in entity, in Type2), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobRWRR<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<R<C0>, RW<C1>, R<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in span0[i]), new(ref span1[i], in entity, in Type1), new(in span2[i]), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobERWRR<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<EntityRef, R<C0>, RW<C1>, R<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), new(in span0[i]), new(ref span1[i], in entity, in Type1), new(in span2[i]), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobURWRR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<U, R<C0>, RW<C1>, R<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(Uniform, new(in span0[i]), new(ref span1[i], in entity, in Type1), new(in span2[i]), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobEURWRR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<EntityRef, U, R<C0>, RW<C1>, R<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), Uniform, new(in span0[i]), new(ref span1[i], in entity, in Type1), new(in span2[i]), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobRWRW<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<R<C0>, RW<C1>, R<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in span0[i]), new(ref span1[i], in entity, in Type1), new(in span2[i]), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobERWRW<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<EntityRef, R<C0>, RW<C1>, R<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), new(in span0[i]), new(ref span1[i], in entity, in Type1), new(in span2[i]), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobURWRW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<U, R<C0>, RW<C1>, R<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(Uniform, new(in span0[i]), new(ref span1[i], in entity, in Type1), new(in span2[i]), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobEURWRW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<EntityRef, U, R<C0>, RW<C1>, R<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), Uniform, new(in span0[i]), new(ref span1[i], in entity, in Type1), new(in span2[i]), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobRWWR<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<R<C0>, RW<C1>, RW<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in span0[i]), new(ref span1[i], in entity, in Type1), new(ref span2[i], in entity, in Type2), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobERWWR<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<EntityRef, R<C0>, RW<C1>, RW<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), new(in span0[i]), new(ref span1[i], in entity, in Type1), new(ref span2[i], in entity, in Type2), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobURWWR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<U, R<C0>, RW<C1>, RW<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(Uniform, new(in span0[i]), new(ref span1[i], in entity, in Type1), new(ref span2[i], in entity, in Type2), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobEURWWR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<EntityRef, U, R<C0>, RW<C1>, RW<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), Uniform, new(in span0[i]), new(ref span1[i], in entity, in Type1), new(ref span2[i], in entity, in Type2), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobRWWW<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<R<C0>, RW<C1>, RW<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in span0[i]), new(ref span1[i], in entity, in Type1), new(ref span2[i], in entity, in Type2), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobERWWW<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<EntityRef, R<C0>, RW<C1>, RW<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), new(in span0[i]), new(ref span1[i], in entity, in Type1), new(ref span2[i], in entity, in Type2), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobURWWW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<U, R<C0>, RW<C1>, RW<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(Uniform, new(in span0[i]), new(ref span1[i], in entity, in Type1), new(ref span2[i], in entity, in Type2), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobEURWWW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal ReadOnlyMemory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<EntityRef, U, R<C0>, RW<C1>, RW<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), Uniform, new(in span0[i]), new(ref span1[i], in entity, in Type1), new(ref span2[i], in entity, in Type2), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobWRRR<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<RW<C0>, R<C1>, R<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(ref span0[i], in entity, in Type0), new(in span1[i]), new(in span2[i]), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobEWRRR<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<EntityRef, RW<C0>, R<C1>, R<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), new(ref span0[i], in entity, in Type0), new(in span1[i]), new(in span2[i]), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobUWRRR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<U, RW<C0>, R<C1>, R<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(Uniform, new(ref span0[i], in entity, in Type0), new(in span1[i]), new(in span2[i]), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobEUWRRR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<EntityRef, U, RW<C0>, R<C1>, R<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), Uniform, new(ref span0[i], in entity, in Type0), new(in span1[i]), new(in span2[i]), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobWRRW<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<RW<C0>, R<C1>, R<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(ref span0[i], in entity, in Type0), new(in span1[i]), new(in span2[i]), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobEWRRW<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<EntityRef, RW<C0>, R<C1>, R<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), new(ref span0[i], in entity, in Type0), new(in span1[i]), new(in span2[i]), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobUWRRW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<U, RW<C0>, R<C1>, R<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(Uniform, new(ref span0[i], in entity, in Type0), new(in span1[i]), new(in span2[i]), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobEUWRRW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<EntityRef, U, RW<C0>, R<C1>, R<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), Uniform, new(ref span0[i], in entity, in Type0), new(in span1[i]), new(in span2[i]), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobWRWR<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<RW<C0>, R<C1>, RW<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(ref span0[i], in entity, in Type0), new(in span1[i]), new(ref span2[i], in entity, in Type2), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobEWRWR<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<EntityRef, RW<C0>, R<C1>, RW<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), new(ref span0[i], in entity, in Type0), new(in span1[i]), new(ref span2[i], in entity, in Type2), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobUWRWR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<U, RW<C0>, R<C1>, RW<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(Uniform, new(ref span0[i], in entity, in Type0), new(in span1[i]), new(ref span2[i], in entity, in Type2), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobEUWRWR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<EntityRef, U, RW<C0>, R<C1>, RW<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), Uniform, new(ref span0[i], in entity, in Type0), new(in span1[i]), new(ref span2[i], in entity, in Type2), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobWRWW<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<RW<C0>, R<C1>, RW<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(ref span0[i], in entity, in Type0), new(in span1[i]), new(ref span2[i], in entity, in Type2), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobEWRWW<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<EntityRef, RW<C0>, R<C1>, RW<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), new(ref span0[i], in entity, in Type0), new(in span1[i]), new(ref span2[i], in entity, in Type2), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobUWRWW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<U, RW<C0>, R<C1>, RW<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(Uniform, new(ref span0[i], in entity, in Type0), new(in span1[i]), new(ref span2[i], in entity, in Type2), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobEUWRWW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal ReadOnlyMemory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<EntityRef, U, RW<C0>, R<C1>, RW<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), Uniform, new(ref span0[i], in entity, in Type0), new(in span1[i]), new(ref span2[i], in entity, in Type2), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobWWRR<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<RW<C0>, RW<C1>, R<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(ref span0[i], in entity, in Type0), new(ref span1[i], in entity, in Type1), new(in span2[i]), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobEWWRR<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<EntityRef, RW<C0>, RW<C1>, R<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), new(ref span0[i], in entity, in Type0), new(ref span1[i], in entity, in Type1), new(in span2[i]), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobUWWRR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<U, RW<C0>, RW<C1>, R<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(Uniform, new(ref span0[i], in entity, in Type0), new(ref span1[i], in entity, in Type1), new(in span2[i]), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobEUWWRR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<EntityRef, U, RW<C0>, RW<C1>, R<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), Uniform, new(ref span0[i], in entity, in Type0), new(ref span1[i], in entity, in Type1), new(in span2[i]), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobWWRW<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<RW<C0>, RW<C1>, R<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(ref span0[i], in entity, in Type0), new(ref span1[i], in entity, in Type1), new(in span2[i]), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobEWWRW<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<EntityRef, RW<C0>, RW<C1>, R<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), new(ref span0[i], in entity, in Type0), new(ref span1[i], in entity, in Type1), new(in span2[i]), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobUWWRW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<U, RW<C0>, RW<C1>, R<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(Uniform, new(ref span0[i], in entity, in Type0), new(ref span1[i], in entity, in Type1), new(in span2[i]), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobEUWWRW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal ReadOnlyMemory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<EntityRef, U, RW<C0>, RW<C1>, R<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), Uniform, new(ref span0[i], in entity, in Type0), new(ref span1[i], in entity, in Type1), new(in span2[i]), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobWWWR<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<RW<C0>, RW<C1>, RW<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(ref span0[i], in entity, in Type0), new(ref span1[i], in entity, in Type1), new(ref span2[i], in entity, in Type2), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobEWWWR<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<EntityRef, RW<C0>, RW<C1>, RW<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), new(ref span0[i], in entity, in Type0), new(ref span1[i], in entity, in Type1), new(ref span2[i], in entity, in Type2), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobUWWWR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<U, RW<C0>, RW<C1>, RW<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(Uniform, new(ref span0[i], in entity, in Type0), new(ref span1[i], in entity, in Type1), new(ref span2[i], in entity, in Type2), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobEUWWWR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal ReadOnlyMemory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<EntityRef, U, RW<C0>, RW<C1>, RW<C2>, R<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), Uniform, new(ref span0[i], in entity, in Type0), new(ref span1[i], in entity, in Type1), new(ref span2[i], in entity, in Type2), new(in span3[i]));
            }
            CountDown.Signal();
        }
    }

    internal record JobWWWW<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<RW<C0>, RW<C1>, RW<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(ref span0[i], in entity, in Type0), new(ref span1[i], in entity, in Type1), new(ref span2[i], in entity, in Type2), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobEWWWW<C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;




        public Action<EntityRef, RW<C0>, RW<C1>, RW<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), new(ref span0[i], in entity, in Type0), new(ref span1[i], in entity, in Type1), new(ref span2[i], in entity, in Type2), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobUWWWW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<U, RW<C0>, RW<C1>, RW<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(Uniform, new(ref span0[i], in entity, in Type0), new(ref span1[i], in entity, in Type1), new(ref span2[i], in entity, in Type2), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

    internal record JobEUWWWW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
        where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
    {
        public ReadOnlyMemory<Identity> MemoryE = null!;
        public World World = null!;

        internal Memory<C0> Memory0 = null!;
internal Memory<C1> Memory1 = null!;
internal Memory<C2> Memory2 = null!;
internal Memory<C3> Memory3 = null!;


        internal TypeExpression Type0 = default;
internal TypeExpression Type1 = default;
internal TypeExpression Type2 = default;
internal TypeExpression Type3 = default;


        public U Uniform = default!;

        public Action<EntityRef, U, RW<C0>, RW<C1>, RW<C2>, RW<C3>> Action = null!;
        public CountdownEvent CountDown = null!;
        public void Execute()
        {
            var identities = MemoryE.Span;
            var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

            var count = identities.Length;
            for (var i = 0; i < count; i++)
            {
                var entity = new Entity(World, identities[i]);
                Action(new(in entity), Uniform, new(ref span0[i], in entity, in Type0), new(ref span1[i], in entity, in Type1), new(ref span2[i], in entity, in Type2), new(ref span3[i], in entity, in Type3));
            }
            CountDown.Signal();
        }
    }

