// <auto-generated/>
using System.Runtime.CompilerServices;
using fennecs.pools;
using fennecs.storage;

namespace fennecs.jobs;

#pragma warning disable CS0414 // Field is assigned but its value is never used
// ReSharper disable file IdentifierTypo

internal record JobR<C0> : IThreadPoolWorkItem
    where C0 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;


    internal TypeExpression Type0 = default;




    public Action<R<C0>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span;

        bool bc0 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]));
        }
        CountDown.Signal();
    }
}

internal record JobER<C0> : IThreadPoolWorkItem
    where C0 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;


    internal TypeExpression Type0 = default;




    public Action<EntityRef, R<C0>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span;

        bool bc0 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]));
        }
        CountDown.Signal();
    }
}

internal record JobUR<U, C0> : IThreadPoolWorkItem
    where C0 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;


    internal TypeExpression Type0 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span;

        bool bc0 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEUR<U, C0> : IThreadPoolWorkItem
    where C0 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;


    internal TypeExpression Type0 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span;

        bool bc0 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]));
        }
        CountDown.Signal();
    }
}

internal record JobW<C0> : IThreadPoolWorkItem
    where C0 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;


    internal TypeExpression Type0 = default;




    public Action<RW<C0>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span;

        bool bc0 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0));
        }
        CountDown.Signal();
    }
}

internal record JobEW<C0> : IThreadPoolWorkItem
    where C0 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;


    internal TypeExpression Type0 = default;




    public Action<EntityRef, RW<C0>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span;

        bool bc0 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0));
        }
        CountDown.Signal();
    }
}

internal record JobUW<U, C0> : IThreadPoolWorkItem
    where C0 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;


    internal TypeExpression Type0 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span;

        bool bc0 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0));
        }
        CountDown.Signal();
    }
}

internal record JobEUW<U, C0> : IThreadPoolWorkItem
    where C0 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;


    internal TypeExpression Type0 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span;

        bool bc0 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0));
        }
        CountDown.Signal();
    }
}

internal record JobRR<C0, C1> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;




    public Action<R<C0>, R<C1>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span;

        bool bc0 = false; bool bc1 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(in span1[i]));
        }
        CountDown.Signal();
    }
}

internal record JobERR<C0, C1> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;




    public Action<EntityRef, R<C0>, R<C1>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span;

        bool bc0 = false; bool bc1 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(in span1[i]));
        }
        CountDown.Signal();
    }
}

internal record JobURR<U, C0, C1> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, R<C1>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span;

        bool bc0 = false; bool bc1 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(in span1[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEURR<U, C0, C1> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, R<C1>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span;

        bool bc0 = false; bool bc1 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(in span1[i]));
        }
        CountDown.Signal();
    }
}

internal record JobRW<C0, C1> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;




    public Action<R<C0>, RW<C1>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span;

        bool bc0 = false; bool bc1 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1));
        }
        CountDown.Signal();
    }
}

internal record JobERW<C0, C1> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;




    public Action<EntityRef, R<C0>, RW<C1>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span;

        bool bc0 = false; bool bc1 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1));
        }
        CountDown.Signal();
    }
}

internal record JobURW<U, C0, C1> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, RW<C1>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span;

        bool bc0 = false; bool bc1 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1));
        }
        CountDown.Signal();
    }
}

internal record JobEURW<U, C0, C1> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, RW<C1>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span;

        bool bc0 = false; bool bc1 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1));
        }
        CountDown.Signal();
    }
}

internal record JobWR<C0, C1> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;




    public Action<RW<C0>, R<C1>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span;

        bool bc0 = false; bool bc1 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEWR<C0, C1> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;




    public Action<EntityRef, RW<C0>, R<C1>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span;

        bool bc0 = false; bool bc1 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]));
        }
        CountDown.Signal();
    }
}

internal record JobUWR<U, C0, C1> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, R<C1>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span;

        bool bc0 = false; bool bc1 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEUWR<U, C0, C1> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, R<C1>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span;

        bool bc0 = false; bool bc1 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]));
        }
        CountDown.Signal();
    }
}

internal record JobWW<C0, C1> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;




    public Action<RW<C0>, RW<C1>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span;

        bool bc0 = false; bool bc1 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1));
        }
        CountDown.Signal();
    }
}

internal record JobEWW<C0, C1> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;




    public Action<EntityRef, RW<C0>, RW<C1>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span;

        bool bc0 = false; bool bc1 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1));
        }
        CountDown.Signal();
    }
}

internal record JobUWW<U, C0, C1> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, RW<C1>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span;

        bool bc0 = false; bool bc1 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1));
        }
        CountDown.Signal();
    }
}

internal record JobEUWW<U, C0, C1> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, RW<C1>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span;

        bool bc0 = false; bool bc1 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1));
        }
        CountDown.Signal();
    }
}

internal record JobRRR<C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;




    public Action<R<C0>, R<C1>, R<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(in span1[i]), new(in span2[i]));
        }
        CountDown.Signal();
    }
}

internal record JobERRR<C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;




    public Action<EntityRef, R<C0>, R<C1>, R<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(in span1[i]), new(in span2[i]));
        }
        CountDown.Signal();
    }
}

internal record JobURRR<U, C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, R<C1>, R<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(in span1[i]), new(in span2[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEURRR<U, C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, R<C1>, R<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(in span1[i]), new(in span2[i]));
        }
        CountDown.Signal();
    }
}

internal record JobRRW<C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;




    public Action<R<C0>, R<C1>, RW<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2));
        }
        CountDown.Signal();
    }
}

internal record JobERRW<C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;




    public Action<EntityRef, R<C0>, R<C1>, RW<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2));
        }
        CountDown.Signal();
    }
}

internal record JobURRW<U, C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, R<C1>, RW<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2));
        }
        CountDown.Signal();
    }
}

internal record JobEURRW<U, C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, R<C1>, RW<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2));
        }
        CountDown.Signal();
    }
}

internal record JobRWR<C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;




    public Action<R<C0>, RW<C1>, R<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]));
        }
        CountDown.Signal();
    }
}

internal record JobERWR<C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;




    public Action<EntityRef, R<C0>, RW<C1>, R<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]));
        }
        CountDown.Signal();
    }
}

internal record JobURWR<U, C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, RW<C1>, R<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEURWR<U, C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, RW<C1>, R<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]));
        }
        CountDown.Signal();
    }
}

internal record JobRWW<C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;




    public Action<R<C0>, RW<C1>, RW<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2));
        }
        CountDown.Signal();
    }
}

internal record JobERWW<C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;




    public Action<EntityRef, R<C0>, RW<C1>, RW<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2));
        }
        CountDown.Signal();
    }
}

internal record JobURWW<U, C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, RW<C1>, RW<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2));
        }
        CountDown.Signal();
    }
}

internal record JobEURWW<U, C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, RW<C1>, RW<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2));
        }
        CountDown.Signal();
    }
}

internal record JobWRR<C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;




    public Action<RW<C0>, R<C1>, R<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEWRR<C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;




    public Action<EntityRef, RW<C0>, R<C1>, R<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]));
        }
        CountDown.Signal();
    }
}

internal record JobUWRR<U, C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, R<C1>, R<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEUWRR<U, C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, R<C1>, R<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]));
        }
        CountDown.Signal();
    }
}

internal record JobWRW<C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;




    public Action<RW<C0>, R<C1>, RW<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2));
        }
        CountDown.Signal();
    }
}

internal record JobEWRW<C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;




    public Action<EntityRef, RW<C0>, R<C1>, RW<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2));
        }
        CountDown.Signal();
    }
}

internal record JobUWRW<U, C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, R<C1>, RW<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2));
        }
        CountDown.Signal();
    }
}

internal record JobEUWRW<U, C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, R<C1>, RW<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2));
        }
        CountDown.Signal();
    }
}

internal record JobWWR<C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;




    public Action<RW<C0>, RW<C1>, R<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEWWR<C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;




    public Action<EntityRef, RW<C0>, RW<C1>, R<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]));
        }
        CountDown.Signal();
    }
}

internal record JobUWWR<U, C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, RW<C1>, R<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEUWWR<U, C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, RW<C1>, R<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]));
        }
        CountDown.Signal();
    }
}

internal record JobWWW<C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;




    public Action<RW<C0>, RW<C1>, RW<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2));
        }
        CountDown.Signal();
    }
}

internal record JobEWWW<C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;




    public Action<EntityRef, RW<C0>, RW<C1>, RW<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2));
        }
        CountDown.Signal();
    }
}

internal record JobUWWW<U, C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, RW<C1>, RW<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2));
        }
        CountDown.Signal();
    }
}

internal record JobEUWWW<U, C0, C1, C2> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, RW<C1>, RW<C2>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2));
        }
        CountDown.Signal();
    }
}

internal record JobRRRR<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<R<C0>, R<C1>, R<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(in span1[i]), new(in span2[i]), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobERRRR<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<EntityRef, R<C0>, R<C1>, R<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(in span1[i]), new(in span2[i]), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobURRRR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, R<C1>, R<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(in span1[i]), new(in span2[i]), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEURRRR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, R<C1>, R<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(in span1[i]), new(in span2[i]), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobRRRW<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<R<C0>, R<C1>, R<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobERRRW<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<EntityRef, R<C0>, R<C1>, R<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobURRRW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, R<C1>, R<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobEURRRW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, R<C1>, R<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobRRWR<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<R<C0>, R<C1>, RW<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobERRWR<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<EntityRef, R<C0>, R<C1>, RW<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobURRWR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, R<C1>, RW<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEURRWR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, R<C1>, RW<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobRRWW<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<R<C0>, R<C1>, RW<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobERRWW<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<EntityRef, R<C0>, R<C1>, RW<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobURRWW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, R<C1>, RW<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobEURRWW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, R<C1>, RW<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobRWRR<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<R<C0>, RW<C1>, R<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobERWRR<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<EntityRef, R<C0>, RW<C1>, R<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobURWRR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, RW<C1>, R<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEURWRR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, RW<C1>, R<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobRWRW<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<R<C0>, RW<C1>, R<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobERWRW<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<EntityRef, R<C0>, RW<C1>, R<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobURWRW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, RW<C1>, R<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobEURWRW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, RW<C1>, R<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobRWWR<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<R<C0>, RW<C1>, RW<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobERWWR<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<EntityRef, R<C0>, RW<C1>, RW<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobURWWR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, RW<C1>, RW<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEURWWR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, RW<C1>, RW<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobRWWW<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<R<C0>, RW<C1>, RW<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobERWWW<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<EntityRef, R<C0>, RW<C1>, RW<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobURWWW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, RW<C1>, RW<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobEURWWW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, RW<C1>, RW<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobWRRR<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<RW<C0>, R<C1>, R<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEWRRR<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<EntityRef, RW<C0>, R<C1>, R<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobUWRRR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, R<C1>, R<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEUWRRR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, R<C1>, R<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobWRRW<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<RW<C0>, R<C1>, R<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobEWRRW<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<EntityRef, RW<C0>, R<C1>, R<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobUWRRW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, R<C1>, R<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobEUWRRW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, R<C1>, R<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobWRWR<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<RW<C0>, R<C1>, RW<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEWRWR<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<EntityRef, RW<C0>, R<C1>, RW<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobUWRWR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, R<C1>, RW<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEUWRWR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, R<C1>, RW<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobWRWW<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<RW<C0>, R<C1>, RW<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobEWRWW<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<EntityRef, RW<C0>, R<C1>, RW<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobUWRWW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, R<C1>, RW<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobEUWRWW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, R<C1>, RW<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobWWRR<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<RW<C0>, RW<C1>, R<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEWWRR<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<EntityRef, RW<C0>, RW<C1>, R<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobUWWRR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, RW<C1>, R<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEUWWRR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, RW<C1>, R<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobWWRW<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<RW<C0>, RW<C1>, R<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobEWWRW<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<EntityRef, RW<C0>, RW<C1>, R<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobUWWRW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, RW<C1>, R<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobEUWWRW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, RW<C1>, R<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobWWWR<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<RW<C0>, RW<C1>, RW<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEWWWR<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<EntityRef, RW<C0>, RW<C1>, RW<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobUWWWR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, RW<C1>, RW<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEUWWWR<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, RW<C1>, RW<C2>, R<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]));
        }
        CountDown.Signal();
    }
}

internal record JobWWWW<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<RW<C0>, RW<C1>, RW<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobEWWWW<C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;




    public Action<EntityRef, RW<C0>, RW<C1>, RW<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobUWWWW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, RW<C1>, RW<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobEUWWWW<U, C0, C1, C2, C3> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, RW<C1>, RW<C2>, RW<C3>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3));
        }
        CountDown.Signal();
    }
}

internal record JobRRRRR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<R<C0>, R<C1>, R<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(in span1[i]), new(in span2[i]), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobERRRRR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, R<C0>, R<C1>, R<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(in span1[i]), new(in span2[i]), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobURRRRR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, R<C1>, R<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(in span1[i]), new(in span2[i]), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEURRRRR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, R<C1>, R<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(in span1[i]), new(in span2[i]), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobRRRRW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<R<C0>, R<C1>, R<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(in span1[i]), new(in span2[i]), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobERRRRW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, R<C0>, R<C1>, R<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(in span1[i]), new(in span2[i]), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobURRRRW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, R<C1>, R<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(in span1[i]), new(in span2[i]), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEURRRRW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, R<C1>, R<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(in span1[i]), new(in span2[i]), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobRRRWR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<R<C0>, R<C1>, R<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobERRRWR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, R<C0>, R<C1>, R<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobURRRWR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, R<C1>, R<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEURRRWR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, R<C1>, R<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobRRRWW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<R<C0>, R<C1>, R<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobERRRWW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, R<C0>, R<C1>, R<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobURRRWW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, R<C1>, R<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEURRRWW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, R<C1>, R<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobRRWRR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<R<C0>, R<C1>, RW<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobERRWRR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, R<C0>, R<C1>, RW<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobURRWRR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, R<C1>, RW<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEURRWRR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, R<C1>, RW<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobRRWRW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<R<C0>, R<C1>, RW<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobERRWRW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, R<C0>, R<C1>, RW<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobURRWRW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, R<C1>, RW<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEURRWRW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, R<C1>, RW<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobRRWWR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<R<C0>, R<C1>, RW<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobERRWWR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, R<C0>, R<C1>, RW<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobURRWWR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, R<C1>, RW<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEURRWWR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, R<C1>, RW<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobRRWWW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<R<C0>, R<C1>, RW<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobERRWWW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, R<C0>, R<C1>, RW<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobURRWWW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, R<C1>, RW<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEURRWWW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, R<C1>, RW<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobRWRRR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<R<C0>, RW<C1>, R<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobERWRRR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, R<C0>, RW<C1>, R<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobURWRRR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, RW<C1>, R<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEURWRRR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, RW<C1>, R<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobRWRRW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<R<C0>, RW<C1>, R<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobERWRRW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, R<C0>, RW<C1>, R<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobURWRRW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, RW<C1>, R<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEURWRRW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, RW<C1>, R<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobRWRWR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<R<C0>, RW<C1>, R<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobERWRWR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, R<C0>, RW<C1>, R<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobURWRWR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, RW<C1>, R<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEURWRWR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, RW<C1>, R<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobRWRWW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<R<C0>, RW<C1>, R<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobERWRWW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, R<C0>, RW<C1>, R<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobURWRWW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, RW<C1>, R<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEURWRWW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, RW<C1>, R<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobRWWRR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<R<C0>, RW<C1>, RW<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobERWWRR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, R<C0>, RW<C1>, RW<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobURWWRR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, RW<C1>, RW<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEURWWRR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, RW<C1>, RW<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobRWWRW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<R<C0>, RW<C1>, RW<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobERWWRW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, R<C0>, RW<C1>, RW<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobURWWRW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, RW<C1>, RW<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEURWWRW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, RW<C1>, RW<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobRWWWR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<R<C0>, RW<C1>, RW<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobERWWWR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, R<C0>, RW<C1>, RW<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobURWWWR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, RW<C1>, RW<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEURWWWR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, RW<C1>, RW<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobRWWWW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<R<C0>, RW<C1>, RW<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobERWWWW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, R<C0>, RW<C1>, RW<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobURWWWW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, R<C0>, RW<C1>, RW<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEURWWWW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryR<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, R<C0>, RW<C1>, RW<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(in span0[i]), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobWRRRR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<RW<C0>, R<C1>, R<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEWRRRR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, RW<C0>, R<C1>, R<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobUWRRRR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, R<C1>, R<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEUWRRRR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, R<C1>, R<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobWRRRW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<RW<C0>, R<C1>, R<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEWRRRW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, RW<C0>, R<C1>, R<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobUWRRRW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, R<C1>, R<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEUWRRRW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, R<C1>, R<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobWRRWR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<RW<C0>, R<C1>, R<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEWRRWR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, RW<C0>, R<C1>, R<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobUWRRWR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, R<C1>, R<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEUWRRWR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, R<C1>, R<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobWRRWW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<RW<C0>, R<C1>, R<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEWRRWW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, RW<C0>, R<C1>, R<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobUWRRWW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, R<C1>, R<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEUWRRWW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, R<C1>, R<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobWRWRR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<RW<C0>, R<C1>, RW<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEWRWRR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, RW<C0>, R<C1>, RW<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobUWRWRR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, R<C1>, RW<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEUWRWRR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, R<C1>, RW<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobWRWRW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<RW<C0>, R<C1>, RW<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEWRWRW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, RW<C0>, R<C1>, RW<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobUWRWRW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, R<C1>, RW<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEUWRWRW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, R<C1>, RW<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobWRWWR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<RW<C0>, R<C1>, RW<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEWRWWR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, RW<C0>, R<C1>, RW<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobUWRWWR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, R<C1>, RW<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEUWRWWR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, R<C1>, RW<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobWRWWW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<RW<C0>, R<C1>, RW<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEWRWWW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, RW<C0>, R<C1>, RW<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobUWRWWW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, R<C1>, RW<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEUWRWWW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryR<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, R<C1>, RW<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(in span1[i]), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobWWRRR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<RW<C0>, RW<C1>, R<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEWWRRR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, RW<C0>, RW<C1>, R<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobUWWRRR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, RW<C1>, R<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEUWWRRR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, RW<C1>, R<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobWWRRW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<RW<C0>, RW<C1>, R<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEWWRRW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, RW<C0>, RW<C1>, R<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobUWWRRW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, RW<C1>, R<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEUWWRRW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, RW<C1>, R<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobWWRWR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<RW<C0>, RW<C1>, R<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEWWRWR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, RW<C0>, RW<C1>, R<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobUWWRWR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, RW<C1>, R<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEUWWRWR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, RW<C1>, R<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobWWRWW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<RW<C0>, RW<C1>, R<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEWWRWW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, RW<C0>, RW<C1>, R<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobUWWRWW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, RW<C1>, R<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEUWWRWW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryR<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, RW<C1>, R<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(in span2[i]), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobWWWRR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<RW<C0>, RW<C1>, RW<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEWWWRR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, RW<C0>, RW<C1>, RW<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobUWWWRR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, RW<C1>, RW<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEUWWWRR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, RW<C1>, RW<C2>, R<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobWWWRW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<RW<C0>, RW<C1>, RW<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEWWWRW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, RW<C0>, RW<C1>, RW<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobUWWWRW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, RW<C1>, RW<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEUWWWRW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryR<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, RW<C1>, RW<C2>, R<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(in span3[i]), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobWWWWR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<RW<C0>, RW<C1>, RW<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEWWWWR<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, RW<C0>, RW<C1>, RW<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobUWWWWR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, RW<C1>, RW<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobEUWWWWR<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryR<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, RW<C1>, RW<C2>, RW<C3>, R<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(in span4[i]));
        }
        CountDown.Signal();
    }
}

internal record JobWWWWW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<RW<C0>, RW<C1>, RW<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEWWWWW<C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;




    public Action<EntityRef, RW<C0>, RW<C1>, RW<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobUWWWWW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<U, RW<C0>, RW<C1>, RW<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

internal record JobEUWWWWW<U, C0, C1, C2, C3, C4> : IThreadPoolWorkItem
    where C0 : notnull where C1 : notnull where C2 : notnull where C3 : notnull where C4 : notnull
{
    public MemoryR<Identity> MemoryE= default!;
    public World World = null!;

    internal MemoryRW<C0> Memory0 = default!;
    internal MemoryRW<C1> Memory1 = default!;
    internal MemoryRW<C2> Memory2 = default!;
    internal MemoryRW<C3> Memory3 = default!;
    internal MemoryRW<C4> Memory4 = default!;


    internal TypeExpression Type0 = default;
    internal TypeExpression Type1 = default;
    internal TypeExpression Type2 = default;
    internal TypeExpression Type3 = default;
    internal TypeExpression Type4 = default;


    internal U Uniform = default!;

    public Action<EntityRef, U, RW<C0>, RW<C1>, RW<C2>, RW<C3>, RW<C4>> Action = null!;
    public CountdownEvent CountDown = null!;
    public void Execute()
    {
        var identities = MemoryE.Span;
        var count = identities.Length;

        var span0 = Memory0.Span; var span1 = Memory1.Span; var span2 = Memory2.Span; var span3 = Memory3.Span; var span4 = Memory4.Span;

        bool bc0 = false; bool bc1 = false; bool bc2 = false; bool bc3 = false; bool bc4 = false;

        for (var i = 0; i < count; i++)
        {
           var entity = new Entity(World, identities[i]);
           Action(new(in entity), Uniform, new(ref span0[i], in Type0, in entity, ref bc0), new(ref span1[i], in Type1, in entity, ref bc1), new(ref span2[i], in Type2, in entity, ref bc2), new(ref span3[i], in Type3, in entity, ref bc3), new(ref span4[i], in Type4, in entity, ref bc4));
        }
        CountDown.Signal();
    }
}

